<folder version="37" creator="Apsim 7.9-r4044" name="simulations">
  <simulation name="barley1_factorial">
    <metfile name="met">
      <filename name="filename" input="yes">C:/GoogleDrive/BarleyLab/Breeding/EnvironmentalData/GrowthStaging/MetFiles/S2_MET_STP16.met</filename>
      <targets />
      <vars />
    </metfile>
    <clock>
      <start_date type="date" description="Enter the start date of the simulation">01/01/2016</start_date>
      <end_date type="date" description="Enter the end date of the simulation">31/12/2016</end_date>
    </clock>
    <summaryfile />
    <area name="paddock">
      <fertiliser />
      <folder name="Manager folder">
        <manager2 name="Crop Management">
          <ui>
            <category type="category" description="Crop properties" />
            <crop type="crop" description="Name of this crop">barley</crop>
            <category type="category" description="Sowing criteria" />
            <date1 type="ddmmmdate" description="Enter sowing window START date (dd-mmm)">04-may</date1>
            <date3 type="ddmmmdate" description="Enter cultivar change date (na if not in use)">na</date3>
            <date2 type="ddmmmdate" description="Enter sowing window END date (dd-mmm)">04-may</date2>
            <must_sow type="yesno" description="Must Sow">yes</must_sow>
            <rain_amount type="text" description="Enter amount of cumulative rainfall (mm)">25</rain_amount>
            <rain_days type="text" description="Enter number of days to accumulate rainfall (days)">7</rain_days>
            <esw_amount type="text" description="Enter amount of soil water (mm)">100</esw_amount>
            <category type="category" description="Sowing Parameters" />
            <cultivar1 type="cultivars" description="Enter cultivar : ">barque</cultivar1>
            <cultivar2 type="cultivars" description="Enter 2nd Cultivar (na if not using a second cultivar)">na</cultivar2>
            <density1 type="text" description="Enter sowing density  (plants/m2)">300</density1>
            <depth1 type="text" description="Enter sowing depth  (mm)">30</depth1>
            <row_spacing1 type="text" description="Enter row spacing  (mm)">250</row_spacing1>
            <category type="category" description="Extra Parameters" />
            <ftn1 type="text" description="Enter Fertile Tiller Number (na for auto) : ">na</ftn1>
            <skiprow1 type="list" listvalues="solid, single, double" description="Skip row : ">solid</skiprow1>
            <tillageImplement type="text" description="Name of tillage implement (na if not in use): ">na</tillageImplement>
          </ui>
          <text>using System;
using ModelFramework;
using CSGeneral;

// Basic crop management: sowing &amp; harvesting.
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.
// It will assume it is the only crop in the system if it doesnt find a sequencer.
// If it does find a sequencer, it will do nothing until told to (via Enter/Leave).
public class Script 
{      
   [Link()]  public Simulation MySimulation;
   
   [Param()] private string crop;         // The module name of this crop
   [Param()] private string date1;         //Start of sowing window
   [Param()] private string date2;         //End of sowing window
   [Param()] private string date3;         //date to change to different cultivar
   [Param()] int esw_amount;
   [Param()] private string must_sow;

   [Input()] private DateTime today;

   // Rainfall accumulator
   [Param()] int rain_days;              //check for rain over this period
   [Param()] int rain_amount;            //this much rain over that period

   // Daily rainfall from the system
   [Input] private double rain;
   private ManagerUtility.Tracker&lt;double&gt; rainTracker; 

   private bool inWindow = false;
   private bool endOfWindow = false;
   private bool ChangeCultivar = false;

   //initialise tracker, telling it how many days to track
   [EventHandler] public void OnInitialised()
   {
      rainTracker = new ManagerUtility.Tracker&lt;double&gt;(rain_days); 
   }

   // Daily tests common to all paddocks
   [EventHandler] public void OnPrepare()
   {
      bool startOfWindow = DateUtility.DatesEqual(date1, today);

      inWindow = DateUtility.WithinDates(date1, today, date2);
      ChangeCultivar = false;
      if(date3 != "na")  
         ChangeCultivar = DateUtility.WithinDates(date3, today, date2);
      endOfWindow = DateUtility.DatesEqual(date2, today);

      rainTracker.Add(rain);
      string currentPaddock = "";
      if (MySimulation.Get("currentPaddock", out currentPaddock) == false) 
      {
         // If there is no sequencer plugged in then we are it..
         if (canEnter &gt; 0) {
            OnEnter();
         }
         if (canLeave &gt; 0) {
            OnLeave();
         }
      }
   }
   // Test whether we can sow a crop today
   // +ve number - yes
   // 0          - no
   // -ve number - no, out of scope (planting window)
   [Output, Description("Test whether we can sow a crop today")] public int canEnter  {
      get {
         bool isPossibleToday = false;
         
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);
         //Console.WriteLine("1. '" + currentPaddock + "'");

         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[0];
         //Console.WriteLine("2. " + paddockModule.Name);

         Component cropModule = (Component) paddockModule.LinkByName( crop );

         //Console.WriteLine("3. " + cropModule.Name);
         string plantStatus = "";
         cropModule.Get("plant_status", out plantStatus);

         double esw = 0.0;
         Component soilModule = (Component) paddockModule.LinkByType("SoilWat");
         soilModule.Get("esw", out esw);
         if (plantStatus == "out" &amp;&amp;
             inWindow &amp;&amp;
             rainTracker.Sum() &gt;= rain_amount &amp;&amp;
             esw &gt; esw_amount) 
         {
             isPossibleToday = true;
         } 

	     if (isPossibleToday)
            return 1;
         
         if (plantStatus == "out" &amp;&amp; endOfWindow &amp;&amp; must_sow == "yes")
            return 1;

         if (plantStatus == "out" &amp;&amp; !inWindow)
            return -1;
         
         return 0;
      }
   }  
   
   
   // Sow a crop
   [Param()] private string cultivar1;
   [Param()] private string cultivar2;
   [Param()] private double density1;
   [Param()] private double depth1;
   [Param()] private double row_spacing1;
   [Param()] private string ftn1;
   [Param()] private string skiprow1;
   [Param()] private string tillageImplement;
   
   [EventHandler, Description("Sow the crop")] public void OnEnter()
   {
      Console.WriteLine(today + " Sowing Crop");
      SowType data = new SowType();
      data.Cultivar = cultivar1;
      if(ChangeCultivar)
         data.Cultivar = cultivar2;

      data.plants = density1;
      data.sowing_depth = depth1;
      data.row_spacing = row_spacing1;
      data.tiller_no_fertile = (ftn1 == "na") ? "" : ftn1;
      data.SkipRow = 0 ;
      if (skiprow1 == "single")
         data.SkipRow = 1;
      else if (skiprow1 == "double")
         data.SkipRow = 2;

      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("Sow", data);

      if (tillageImplement.ToLower() != "na") 
	  {
         TillageType t = new TillageType();
         t.type = tillageImplement;
         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = MySimulation.ChildPaddocks[0];
         paddockModule.Publish("tillage", t);
      }		 
   }

   // Test whether we can harvest a crop today
   // +ve number - yes
   // 0          - no
   // -ve        - out of scope
   [Output] public int canLeave  
   {
      get 
      {
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);

         string plantStatus = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".plant_status", out plantStatus);
         if (plantStatus == "out")
            return -1;

         string StageName = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".StageName", out StageName);
         if (StageName == "harvest_ripe" || plantStatus == "dead")
            return 1;
         return 0;
      }
   }

   [EventHandler] public void OnLeave()
   {
      Console.WriteLine(today + " Harvesting Crop");
      HarvestType hdata = new HarvestType();
      hdata.Remove = 0.0;
      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("harvest", hdata);

      KillCropType kdata = new KillCropType();
      kdata.KillFraction = 0.0F;
      cropModule.Publish("killcrop", kdata);
      cropModule.Publish("end_crop");
   } 
}
       </text>
        </manager2>
        <manager2 name="Fertilise at Sowing">
          <ui>
            <tag type="category" description="When should fertiliser be applied" />
            <ModuleName type="modulename" description="On which module should the event come from: ">barley</ModuleName>
            <EventName type="text" description="On which event should spraying be triggered">sowing</EventName>
            <tag type="category" description="Event details" />
            <fertType type="text" description="The type of fertiliser">urea_N</fertType>
            <fertAmt type="text" description="Amount of fertiliser to apply (kg/ha)">150</fertAmt>
          </ui>
          <text>using System;
using System.Linq;
using System.Collections.Generic;
using ModelFramework;

// Crop management: fertilise at sowing
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.

public class Script 
{      
   [Link]  public Simulation MySimulation;
   [Param] string fertType;
   [Param] float fertAmt;
   [Param] string ModuleName;
   [Param] string EventName;
   
   [EventHandler] public void OnStart_Simulation()
   {
      foreach (Paddock paddock in MySimulation.ChildPaddocks) 
      {
         foreach (Component child in paddock.Children) {
            if(child.Name == ModuleName){
               RuntimeEventHandler.NullFunction curried = () =&gt; OnTrigger(paddock.Name);
               MySimulation.Subscribe(child.FullName + "." + EventName, curried);
               //Console.WriteLine("Subscribed '" + child.FullName + "." + EventName + " =&gt; " + paddock.Name + "'"); 
            }
         }
      }
   }

   public void OnTrigger(string paddock)
   {
      Console.WriteLine("Fertiliser OnTrigger called, paddock='" + paddock + "'"); 
      if (fertAmt &gt; 0) 
      {         
         Component paddockModule;
         if (paddock != "")
            paddockModule = (Component) MySimulation.LinkByName(paddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[0];
         //Console.WriteLine("2. " + paddockModule.Name);

         Fertiliser fertModule = (Fertiliser) paddockModule.LinkByName("Fertiliser");
         fertModule.Apply(fertAmt, 50, fertType);
      }
   }
}
       </text>
        </manager2>
      </folder>
      <outputfile>
        <filename output="yes">barley1_factorial.out</filename>
        <title>barley1_factorial</title>
        <variables name="Variables">
          <variable>dd/mm/yyyy as Date</variable>
          <variable>day</variable>
          <variable>year</variable>
          <variable>yield</variable>
          <variable>zadok_stage</variable>
          <variable>grain_protein</variable>
          <variable>sowing_das</variable>
          <variable>emergence_das</variable>
          <variable>end_of_juvenile_das</variable>
          <variable>floral_initiation_das</variable>
          <variable>flowering_das</variable>
          <variable>start_grain_fill_das</variable>
          <variable>end_grain_fill_das</variable>
          <variable>maturity_das</variable>
          <variable>eo</variable>
          <variable>TT</variable>
          <variable>MaxT</variable>
          <variable>MinT</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>end_day</event>
        </events>
      </outputfile>
      <barley>
        <ModifyKL type="yesno" description="Modify KL using CL, EC or ESP if found?">yes</ModifyKL>
        <MaxRootDepth description="Maximum rooting depth (mm) 0=no restriction">0</MaxRootDepth>
      </barley>
      <Soil name="Heavy Clay">
        <RecordNumber>0</RecordNumber>
        <SoilType>Generic Vertosol</SoilType>
        <Site>Generic</Site>
        <NearestTown>Toowoomba</NearestTown>
        <Region>Darling Downs and Granite Belt</Region>
        <State>Queensland</State>
        <Country>Australia</Country>
        <Latitude>-27.564333</Latitude>
        <Longitude>151.953991</Longitude>
        <LocationAccuracy>Regional Soil Type</LocationAccuracy>
        <YearOfSampling>0</YearOfSampling>
        <DataSource>YP. A Peake-CSIRO Sustainable Ecosystems, Toowoomba</DataSource>
        <Comments>Generic soil developed by Allan Peake.</Comments>
        <Water>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.05</double>
            <double>1.08</double>
            <double>1.12</double>
            <double>1.15</double>
            <double>1.18</double>
            <double>1.21</double>
            <double>1.25</double>
          </BD>
          <AirDry>
            <double>0.135</double>
            <double>0.196</double>
            <double>0.232</double>
            <double>0.27</double>
            <double>0.279</double>
            <double>0.288</double>
            <double>0.297</double>
          </AirDry>
          <LL15>
            <double>0.27</double>
            <double>0.28</double>
            <double>0.29</double>
            <double>0.3</double>
            <double>0.31</double>
            <double>0.32</double>
            <double>0.33</double>
          </LL15>
          <DUL>
            <double>0.51</double>
            <double>0.5</double>
            <double>0.49</double>
            <double>0.48</double>
            <double>0.47</double>
            <double>0.46</double>
            <double>0.45</double>
          </DUL>
          <SAT>
            <double>0.574</double>
            <double>0.562</double>
            <double>0.547</double>
            <double>0.536</double>
            <double>0.525</double>
            <double>0.513</double>
            <double>0.498</double>
          </SAT>
          <SoilCrop name="wheat">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.27</double>
              <double>0.28</double>
              <double>0.29</double>
              <double>0.3</double>
              <double>0.31</double>
              <double>0.32</double>
              <double>0.33</double>
            </LL>
            <KL>
              <double>0.06</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.04</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.02</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="sorghum">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.27</double>
              <double>0.28</double>
              <double>0.29</double>
              <double>0.3</double>
              <double>0.31</double>
              <double>0.32</double>
              <double>0.33</double>
            </LL>
            <KL>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.07</double>
              <double>0.05</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.02</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="barley">
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <LL>
              <double>0.29</double>
              <double>0.29</double>
              <double>0.32</double>
              <double>0.38</double>
              <double>0.39</double>
              <double>0.39</double>
              <double>0.41</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
            </XF>
          </SoilCrop>
        </Water>
        <SoilWater>
          <SummerCona>3.5</SummerCona>
          <SummerU>6</SummerU>
          <SummerDate>1-Nov</SummerDate>
          <WinterCona>2.5</WinterCona>
          <WinterU>4</WinterU>
          <WinterDate>1-apr</WinterDate>
          <DiffusConst>40</DiffusConst>
          <DiffusSlope>16</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Slope>NaN</Slope>
          <DischargeWidth>NaN</DischargeWidth>
          <CatchmentArea>NaN</CatchmentArea>
          <MaxPond>NaN</MaxPond>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
            <double>0.3</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>40</RootCN>
          <RootWt>1000</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <OC>
            <double>1</double>
            <double>0.5</double>
            <double>0.25</double>
            <double>0.2</double>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </OC>
          <FBiom>
            <double>0.02</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </FBiom>
          <FInert>
            <double>0.4</double>
            <double>0.6</double>
            <double>0.8</double>
            <double>0.9</double>
            <double>1</double>
            <double>1</double>
            <double>1</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <Analysis>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Texture>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </Texture>
          <MunsellColour>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </MunsellColour>
          <EC>
            <double>0.1</double>
            <double>0.2</double>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.4</double>
            <double>0.5</double>
            <double>0.6</double>
          </EC>
          <PH>
            <double>8.5</double>
            <double>8.7</double>
            <double>8.5</double>
            <double>8</double>
            <double>7</double>
            <double>6</double>
            <double>5</double>
          </PH>
          <CL>
            <double>20</double>
            <double>40</double>
            <double>70</double>
            <double>110</double>
            <double>160</double>
            <double>220</double>
            <double>300</double>
          </CL>
          <ESP>
            <double>1</double>
            <double>2</double>
            <double>3</double>
            <double>5</double>
            <double>8</double>
            <double>12</double>
            <double>15</double>
          </ESP>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <InitialWater>
          <FractionFull>1</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
          <PercentMethod>FilledFromTop</PercentMethod>
        </InitialWater>
        <Sample name="Initial nitrogen">
          <Thickness>
            <double>100</double>
          </Thickness>
          <NO3>
            <double>0</double>
          </NO3>
          <NH4>
            <double>0</double>
          </NH4>
          <SW>
            <double>0</double>
          </SW>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
      </Soil>
    </area>
  </simulation>
  <factorial name="Factorials">
    <active>1</active>
    <settings fn="1" />
    <factor>
      <targets>
        <Target>/simulations/barley1_factorial/paddock/Manager folder/Crop Management</Target>
        <Target>/simulations/barley1_factorial/met</Target>
      </targets>
      <vars>
        <cultivar1>barque, bass, baudin, Buloke, capstan, Cask, commander, compass, Dash, Excel, Fathom, FlagShip, Flinders, franklin, gairdner, gairdner_TAS, Grange, Grimmett, hamelin, Henley, hindmarsh, keel, Koru, LaTrobe, Litmus, Mackay, maritime, Navigator, oxford, schooner, Scope, skiff, Skipper, sloop, SYRattler, Triumph, Valetta, Vlaming, Westminster, Wimmera, yagen</cultivar1>
      </vars>
      <manager2 name="Crop Management">
        <ui>
          <category type="category" description="Crop properties" />
          <crop type="crop" description="Name of this crop">barley</crop>
          <category type="category" description="Sowing criteria" />
          <date1 type="ddmmmdate" description="Enter sowing window START date (dd-mmm)">04-may</date1>
          <date3 type="ddmmmdate" description="Enter cultivar change date (na if not in use)">na</date3>
          <date2 type="ddmmmdate" description="Enter sowing window END date (dd-mmm)">04-may</date2>
          <must_sow type="yesno" description="Must Sow">yes</must_sow>
          <rain_amount type="text" description="Enter amount of cumulative rainfall (mm)">25</rain_amount>
          <rain_days type="text" description="Enter number of days to accumulate rainfall (days)">7</rain_days>
          <esw_amount type="text" description="Enter amount of soil water (mm)">100</esw_amount>
          <category type="category" description="Sowing Parameters" />
          <cultivar1 type="cultivars" description="Enter cultivar : ">barque</cultivar1>
          <cultivar2 type="cultivars" description="Enter 2nd Cultivar (na if not using a second cultivar)">na</cultivar2>
          <density1 type="text" description="Enter sowing density  (plants/m2)">300</density1>
          <depth1 type="text" description="Enter sowing depth  (mm)">30</depth1>
          <row_spacing1 type="text" description="Enter row spacing  (mm)">250</row_spacing1>
          <category type="category" description="Extra Parameters" />
          <ftn1 type="text" description="Enter Fertile Tiller Number (na for auto) : ">na</ftn1>
          <skiprow1 type="list" listvalues="solid, single, double" description="Skip row : ">solid</skiprow1>
          <tillageImplement type="text" description="Name of tillage implement (na if not in use): ">na</tillageImplement>
        </ui>
        <text>using System;
using ModelFramework;
using CSGeneral;

// Basic crop management: sowing &amp; harvesting.
// Multi-paddock aware.
// This component DOES NOT require a trigger from the sequencer.
// It will assume it is the only crop in the system if it doesnt find a sequencer.
// If it does find a sequencer, it will do nothing until told to (via Enter/Leave).
public class Script 
{      
   [Link()]  public Simulation MySimulation;
   
   [Param()] private string crop;         // The module name of this crop
   [Param()] private string date1;         //Start of sowing window
   [Param()] private string date2;         //End of sowing window
   [Param()] private string date3;         //date to change to different cultivar
   [Param()] int esw_amount;
   [Param()] private string must_sow;

   [Input()] private DateTime today;

   // Rainfall accumulator
   [Param()] int rain_days;              //check for rain over this period
   [Param()] int rain_amount;            //this much rain over that period

   // Daily rainfall from the system
   [Input] private double rain;
   private ManagerUtility.Tracker&lt;double&gt; rainTracker; 

   private bool inWindow = false;
   private bool endOfWindow = false;
   private bool ChangeCultivar = false;

   //initialise tracker, telling it how many days to track
   [EventHandler] public void OnInitialised()
   {
      rainTracker = new ManagerUtility.Tracker&lt;double&gt;(rain_days); 
   }

   // Daily tests common to all paddocks
   [EventHandler] public void OnPrepare()
   {
      bool startOfWindow = DateUtility.DatesEqual(date1, today);

      inWindow = DateUtility.WithinDates(date1, today, date2);
      ChangeCultivar = false;
      if(date3 != "na")  
         ChangeCultivar = DateUtility.WithinDates(date3, today, date2);
      endOfWindow = DateUtility.DatesEqual(date2, today);

      rainTracker.Add(rain);
      string currentPaddock = "";
      if (MySimulation.Get("currentPaddock", out currentPaddock) == false) 
      {
         // If there is no sequencer plugged in then we are it..
         if (canEnter &gt; 0) {
            OnEnter();
         }
         if (canLeave &gt; 0) {
            OnLeave();
         }
      }
   }
   // Test whether we can sow a crop today
   // +ve number - yes
   // 0          - no
   // -ve number - no, out of scope (planting window)
   [Output, Description("Test whether we can sow a crop today")] public int canEnter  {
      get {
         bool isPossibleToday = false;
         
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);
         //Console.WriteLine("1. '" + currentPaddock + "'");

         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = (Component) MySimulation.ChildPaddocks[0];
         //Console.WriteLine("2. " + paddockModule.Name);

         Component cropModule = (Component) paddockModule.LinkByName( crop );

         //Console.WriteLine("3. " + cropModule.Name);
         string plantStatus = "";
         cropModule.Get("plant_status", out plantStatus);

         double esw = 0.0;
         Component soilModule = (Component) paddockModule.LinkByType("SoilWat");
         soilModule.Get("esw", out esw);
         if (plantStatus == "out" &amp;&amp;
             inWindow &amp;&amp;
             rainTracker.Sum() &gt;= rain_amount &amp;&amp;
             esw &gt; esw_amount) 
         {
             isPossibleToday = true;
         } 

	     if (isPossibleToday)
            return 1;
         
         if (plantStatus == "out" &amp;&amp; endOfWindow &amp;&amp; must_sow == "yes")
            return 1;

         if (plantStatus == "out" &amp;&amp; !inWindow)
            return -1;
         
         return 0;
      }
   }  
   
   
   // Sow a crop
   [Param()] private string cultivar1;
   [Param()] private string cultivar2;
   [Param()] private double density1;
   [Param()] private double depth1;
   [Param()] private double row_spacing1;
   [Param()] private string ftn1;
   [Param()] private string skiprow1;
   [Param()] private string tillageImplement;
   
   [EventHandler, Description("Sow the crop")] public void OnEnter()
   {
      Console.WriteLine(today + " Sowing Crop");
      SowType data = new SowType();
      data.Cultivar = cultivar1;
      if(ChangeCultivar)
         data.Cultivar = cultivar2;

      data.plants = density1;
      data.sowing_depth = depth1;
      data.row_spacing = row_spacing1;
      data.tiller_no_fertile = (ftn1 == "na") ? "" : ftn1;
      data.SkipRow = 0 ;
      if (skiprow1 == "single")
         data.SkipRow = 1;
      else if (skiprow1 == "double")
         data.SkipRow = 2;

      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("Sow", data);

      if (tillageImplement.ToLower() != "na") 
	  {
         TillageType t = new TillageType();
         t.type = tillageImplement;
         Component paddockModule;
         if (currentPaddock != "")
            paddockModule = (Component) MySimulation.LinkByName(currentPaddock);
         else
            paddockModule = MySimulation.ChildPaddocks[0];
         paddockModule.Publish("tillage", t);
      }		 
   }

   // Test whether we can harvest a crop today
   // +ve number - yes
   // 0          - no
   // -ve        - out of scope
   [Output] public int canLeave  
   {
      get 
      {
         string currentPaddock;
         MySimulation.Get("currentPaddock", out currentPaddock);

         string plantStatus = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".plant_status", out plantStatus);
         if (plantStatus == "out")
            return -1;

         string StageName = "";
         MySimulation.Get((currentPaddock != "" ? currentPaddock + "." : "") + crop + ".StageName", out StageName);
         if (StageName == "harvest_ripe" || plantStatus == "dead")
            return 1;
         return 0;
      }
   }

   [EventHandler] public void OnLeave()
   {
      Console.WriteLine(today + " Harvesting Crop");
      HarvestType hdata = new HarvestType();
      hdata.Remove = 0.0;
      string currentPaddock;
      MySimulation.Get("currentPaddock", out currentPaddock);
      Component cropModule;
      if (currentPaddock != "")
         cropModule = (Component) MySimulation.LinkByName(currentPaddock + "." + crop);
      else 
         cropModule = (Component) MySimulation.ChildPaddocks[0].LinkByName(crop);

      cropModule.Publish("harvest", hdata);

      KillCropType kdata = new KillCropType();
      kdata.KillFraction = 0.0F;
      cropModule.Publish("killcrop", kdata);
      cropModule.Publish("end_crop");
   } 
}
       </text>
      </manager2>
    </factor>
  </factorial>
</folder>